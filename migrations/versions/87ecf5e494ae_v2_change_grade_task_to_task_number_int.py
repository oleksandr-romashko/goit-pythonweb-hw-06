"""v2 Change Grade.task to task_number int

Revision ID: 87ecf5e494ae
Revises: cde09f5d9791
Create Date: 2025-08-05 01:41:34.106938

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "87ecf5e494ae"
down_revision: Union[str, Sequence[str], None] = "cde09f5d9791"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("grades", sa.Column("task_number", sa.Integer(), nullable=False))
    op.drop_constraint(op.f("uq_grade_task"), "grades", type_="unique")
    op.create_unique_constraint(
        "uq_grade_task",
        "grades",
        ["student_id", "group_id", "subject_id", "task_number"],
    )
    op.drop_column("grades", "task")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### downgrade fixed manually ###
    # Step 1: Add 'task' as nullable
    op.add_column(
        "grades",
        sa.Column("task", sa.String(length=100), nullable=True),
    )

    # Step 2: Populate 'task' column from 'task_number' (cast to string)
    op.execute("UPDATE grades SET task = task_number::text")

    # Step 3: Alter 'task' to NOT NULL
    op.alter_column("grades", "task", nullable=False)

    # Step 4: Drop the unique constraint on 'task_number'
    op.drop_constraint("uq_grade_task", "grades", type_="unique")

    # Step 5: Create unique constraint on old columns including 'task'
    op.create_unique_constraint(
        op.f("uq_grade_task"),
        "grades",
        ["student_id", "group_id", "subject_id", "task"],
        postgresql_nulls_not_distinct=False,
    )

    # Step 6: Drop 'task_number' column
    op.drop_column("grades", "task_number")
    # ### end Alembic commands ###
